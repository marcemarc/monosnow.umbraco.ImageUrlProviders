using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Umbraco.Core.Media;
using umbraco.cms.businesslogic.media;


namespace monosnow.umb.ImageUrlProviders
{

        public class CropUpImageUrlProvider : IImageUrlProvider
        {
           /// <summary>
           /// Name of provider
           /// </summary>
            public string Name
            {
                get { return "CropUp"; }
            }




            #region IImageUrlProvider Members
            /// <summary>
            /// Get Image url from Media Id
            /// </summary>
            /// <param name="mediaId">Id of media item</param>
            /// <param name="parameters">parameters passed as dictionary</param>
            /// <returns></returns>
            public string GetImageUrlFromMedia(int mediaId, IDictionary<string, string> parameters)
            {
                Media file = new Media(mediaId);
                string umbracoFile = file.getProperty("umbracoFile").Value.ToString();            
             
                return GetCropUpUrl(umbracoFile,parameters);
            }

            /// <summary>
            /// Get the Url generated by CropUp for the specified parameters
            /// </summary>
            /// <param name="umbracoFile"></param>
            /// <param name="parameters"></param>
            /// <returns></returns>
            public string GetCropUpUrl(string umbracoFile, IDictionary<string, string> parameters)
            {
                string url = umbracoFile;
                string _skipCrop = "0";
                string cropAlias = "";
                parameters.TryGetValue("cropAlias", out cropAlias);
                parameters.TryGetValue("skipCrop", out _skipCrop);
                bool _doCrop = (_skipCrop != "1" && !String.IsNullOrEmpty(cropAlias));
                if (_doCrop)
                {
                    string _cropMode = "BestFit";
                    parameters.TryGetValue("cropMode", out _cropMode);
                    Eksponent.CropUp.CropUpMode cropMode = Eksponent.CropUp.CropModeHelper.FromString(_cropMode);
                    Eksponent.CropUp.ImageSizeArguments args = new Eksponent.CropUp.ImageSizeArguments();
                    args.CropAlias = cropAlias;
                    args.CropMode = cropMode;
                    url = Eksponent.CropUp.CropUp.GetUrl(umbracoFile, args);
                }

                return url;
            }

            /// <summary>
            /// Get Image Url for the specified media filename
            /// </summary>
            /// <param name="specifiedSrc">file path</param>
            /// <param name="parameters">parameters for crop up settings</param>
            /// <returns></returns>
            public string GetImageUrlFromFileName(string specifiedSrc, IDictionary<string, string> parameters)
            {
                return GetCropUpUrl(specifiedSrc, parameters);
            }


            #endregion
        }
    }
